name: Hello World microservice CI/CD

on:
  push:
    branches:
      - master

env:
  IMAGE_TAG_BASE: staillansag/stt-hello-world
  IMAGE_VERSION_BASE: "1.0"

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Log in to Docker Hub
      run: |
        echo "${{ secrets.DOCKER_REGISTRY_ACCESS_TOKEN }}" | docker login -u ${{ secrets.DOCKER_REGISTRY_USERNAME }} --password-stdin

    - name: Build Docker image
      run: |
        docker build -t ${{ env.IMAGE_TAG_BASE }}:latest .

    - name: Tagging image with specific version
      run: |
        docker tag ${{ env.IMAGE_TAG_BASE }}:latest ${{ env.IMAGE_TAG_BASE }}:${{ env.IMAGE_VERSION_BASE }}.$GITHUB_RUN_NUMBER

    - name: Push Docker image
      run: |
        docker push ${{ env.IMAGE_TAG_BASE }}:latest
        docker push ${{ env.IMAGE_TAG_BASE }}:${{ env.IMAGE_VERSION_BASE }}.$GITHUB_RUN_NUMBER

  deploy:
    needs: build-and-push 
    runs-on: ubuntu-latest
    container:
      image: staillansag/ubuntu-cicd

    steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Log in to Azure
      run: |
        az login --service-principal -u ${{ secrets.AZ_SP_ID }} -p ${{ secrets.AZ_SP_SECRET }} --tenant ${{ secrets.AZ_TENANT_ID }}

    - name: Get AKS credentials
      run: |
        az aks get-credentials --name ${{ vars.AKS_CLUSTER }} --resource-group ${{ vars.AKS_RESOURCE_GROUP }} --overwrite-existing

    - name: Deploy microservice
      run: |
        kubectl apply -f kubernetes.yml

    - name: Wait for end of Deployment
      run: |
        kubectl rollout status deployment/stt-hello-world --timeout=300s

    - name: Check microservice health
      shell: bash
      run: |
        PODS=$(kubectl get pods --selector=app=stt-hello-world -o jsonpath='{.items[*].metadata.name}')
        for POD in $PODS; do
          health_json=$(kubectl exec $POD --container msr -- curl -s http://localhost:5555/health)
          if [ -z "${health_json}" ]; then
            echo "Empty response to http://localhost:5555/health for pod ${POD}" && exit 1
          else
            echo "Health status for pod ${POD}"
            echo ${health_json}
          fi
          status_checks=$(echo "$health_json" | jq '. | .. | .status? // empty | select(. != "UP")')
          if [[ -n "$status_checks" ]]; then
            echo "Error: One or more resources in $POD are not 'UP'" && exit 1
          fi
        done
