name: webMethods microservice CI/CD

on:
  push:
    branches:
      - master

env:
  IMAGE_NAME: staillansag/stt-hello-world
  IMAGE_VERSION_BASE: "1.0"

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t ${{ env.IMAGE_NAME }}:latest .

    - name: Tagging image with specific version
      run: |
        docker tag ${{ env.IMAGE_NAME }}:latest ${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION_BASE }}.${{ github.run_number }}

    - name: Log in to Docker Hub
      run: |
        echo "${{ secrets.DOCKER_REGISTRY_ACCESS_TOKEN }}" | docker login -u ${{ secrets.DOCKER_REGISTRY_USERNAME }} --password-stdin

    - name: Push Docker image 
      run: |
        docker push ${{ env.IMAGE_NAME }}:latest 
        docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION_BASE }}.${{ github.run_number }}

    - name: Create Git Tag
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        TAG_NAME=v${{ env.IMAGE_VERSION_BASE }}.${{ github.run_number }}
        gh release create $TAG_NAME --generate-notes 

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    container:
      image: staillansag/ubuntu-cicd:latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Log in to Azure
      run: |
        az login --service-principal -u ${{ secrets.AZ_SP_ID }} -p ${{ secrets.AZ_SP_SECRET }} --tenant ${{ secrets.TENANT_ID }}

    - name: Get AKS credentials
      run: |
        az aks get-credentials --name aks_cluster --resource-group aks_rg --overwrite-existing

    - name: Test Kubernetes connexion
      run: |
        kubectl get nodes  

    - name: Deploy microservice
      run: |
        sed 's/staillansag\/stt-hello-world\:latest/staillansag\/stt-hello-world\:'${{ env.IMAGE_VERSION_BASE }}.${{ github.run_number }}'/g' kubernetes.yml | kubectl apply -f -

    - name: Wait for end of Deployment
      run: |
        kubectl rollout status deployment/stt-hello-world --timeout=300s 